//
//
// //=====================================================EXPRESS - framework ноди=================================================================================//
//
//
//
// //========================================================Must have for Node.js==================================================================================//
//
// const express = require("express");
//
// //встановлення бібліотеки "express"
//
//
// const app = express();
//
// //щоб зробити аплікацію, потрібно виконати express, як функцію
//
// const path = require("path");
//
// // використовуємо бібліотеку "path" щоб можна було прописувати адекватно шляхи
//
// const fs = require("fs")
//
// // використовуємо бібліотеку fs для роботи з файлами (створеня, читання, видаляння ітд..)
//
// app.listen(3000, (err) => {
//     if (err){
//         console.log(err)
//     }else{
//         console.log("SERVER WORK ON port 3000");
//     }
// });
//
// // запуск сервера через пропертю лісен, аргументом передаємо номер порта і колбек який має опрацьовувати інфу, аба виводити
//
// app.use(express.json());
//
// // вчимо наш express працювати з форматом JSON, парсити боді, або все що нам прийде в форматі JSON
//
// app.use(express.urlencoded({extended:true}));
//
// //  вчимо наш express працювати з різними типами даних
//
// //===================================================================================================================================================================//
//
//
//
// // ЩОБ ОБРОюити запит потрібно запустити один з методів get, в нього передаємо роут стрічкою, потім колбек який приймає req(те що передав нам юзер) resp(те що ми віддаємо юзеру)
// //  некст
// // GET рахується НЕБЕЗПЕЧНИМ запитом, тому, що в ньому немає body. В нього все йде в url, а в поста ні.
// //==========================================================================================================================
// // app.get("/", (reg, res) => {
//
// // console.log(reg)
//
//
//
// // res.write()  пише щось в HTML, але не закінчує респонс, закінчує респонс res.end() і вміє, щось приймати у себе.
// //==========================================================================================================================
// // res.write("HELLO 1");
// // res.write("HELLO 2");
// // res.write("HELLO 3");
// // передає відповідь, те що ми юзеру хочемо віддати
// //==========================================================================================================================
// // res.end(" \n END CHAT");
//
// // res.send() відпрацьовує так само як res.end()
// //==========================================================================================================================
// // res.send("HELLO");
//
// // res.json() найчастіше використовується цей метод, він  завершує відповідь повністю, але те що він приймає автоматом віддає в форматі Json
// //==========================================================================================================================
// // res.json("this is json");
// // });
//
// // це ще один варіант провірити, що апка жива
// //==========================================================================================================================
// // app.get("/ping", (reg,res)=>{
// //     res.end("pong")
// // })
//
//
// // можна в роутах передавати якусь інформацію, ця інфа може йти як стрічкою так і певними параметрами.
// //==========================================================================================================================
// // app.get("/hello/:text", ((req, res) => {
// //
// // req.params спеціальний параметр який дає нам все з нашого квері.
// //==========================================================================================================================
// //     const params = req.params
// //     console.log(params)
// // res.end(`HELLO ${params.text}`)
// // }));
//
// // ще один варіант коли тягнемо конкретного юзера
// //==========================================================================================================================
// let users = [
//     {
//         name:"OLEG", age: 22, password:"Pa$$word"
//     }
//     ,
//     {
//         name:"MARYAN", age: 23, password:"Pa$$word"
//     }
//     ,
//     {
//         name:"ROMAN", age: 24, password:"Pa$$word"
//     }
//     ,
//     {
//         name:"ZENYK", age: 25, password:"Pa$$word"
//     }
//
// ];
// //
// // app.get("/users/:userId",(req, res) => {
// //     const{userId} = req.params;
// //     console.log(users[userId]);
// //     res.end("end")
// // });
//
//
// // app.post("/hello", (req, res) => {
// //     console.log(req.body);
// //     res.end("Post request")
// // });
//
//
// // app.post("/",(reg,res)=>{
// //     console.log(reg.body);
// //     res.json("POSTS")
// //
// // });
//
//
// // витягуємо квері парамс, в постмані мусимо їх ввести ЗАВЖДИ ПАМЯТАЄМО, що нода віддає стрічку, тому ми вчимо аппку використовувати JSON
// // app.post("/post", ((req, res) => {
// //     console.log(req.query)
// //     res.end("end");
// // }))
// //                                                   БУДУВННЯ URL
// //===================================================NOT GOOD=======================================================================
//
// // GET /users/all
// // GET /users/getOneById
// // GET /users/singel
// // PUT /users/updateUser
// // DELETE/users/deleteUser/:id
// // PATCH /users/blockUser/:id
//
// //===================================================GOOD=======================================================================
//
// // GET /users
// // GET /users/:user_id
// // GET /users?email=victor.fzs10
// // PUT /users/:user_id            зміна більш глобальна, можеш поміняти пару філдів за один раз
// // DELETE/users/:user_id
// // PATCH /users/block/:user_id    змінна більш конкретного юзера
// // PATCH /users/unblock/:user_id
//
// //                         ROUTER - спосіб не писати всі роути в одному файлі, а розносити їх по різних файлах
// //==========================================================================================================================
//
// // імпортуємо наші роути
// // const {router} = require("./routes/hello.router")
//
// // коли наш запис починаєтьсч на /hello,  відпрацьовує наш роутер.
// // app.use("/hello", router);
//
//
// //                  MIDDLEWARES - це функція, що ставиться між стрінгою та колбеком, має в собі також req res, і вона не допускає якигось не валідних даних до нашого кінцевого обробника, в основному  в них роблять перевірки.
// //==========================================================================================================================
//
// // app.post("/register", checkPasword, ((req, res) => {
// //     res.json({
// //         name: req.body.name,
// //         password: req.body.password
// //     })
// // }));
//
//
// // ця функція і є наш міделвар, котра перевіряє пароль
// // function checkPasword(req, res, next) {
// //     try {
// //         if (!req.body.password || req.body.password.length < 8) {
// //             throw new Error("Password is not valid")
// //         }
// //     } catch (error) {
// //         res.json({
// //             succes: false,
// //             err: error.message
// //         })
// //     }
// //
// //     next()
// //
// // };
// //
//
// //==============================================================Template engine (Handlebars)====================================================================//
//
//
// //=====================================================Must have when use TEMPLATE ENGINE ("express-handlebars")=================================================//
//
// const expressHbs = require("express-handlebars");
//
// // встановлюємо Handlebars
//
// app.set("view engine", ".hbs")
//
// // встанови нам двигун відображення .hbs
// // говорить що буде налаштування "view engine", з значенням ".hbs"
// // встановили, що за малювання двіжків буде відповідати двигун ".hbs"
// // app, встановлюємо який двіжок в нас буде використовуватись для рендіренгу темплейтів. Ми говоримо: аплікушка встанови поле під назвою "view engine", як .hbs.
// // тобто встанови на двигун для відображення .hbs
//
// app.engine(".hbs", expressHbs({defaultLayout: false}));
//
// // описуємо роботу самого двигуна
// // буде запускатися наш "express-handlebars", і обовязково прописуємо один конфіг defaultLayout: з значенням false.
// // ЯКЩО не буде false, то буде валитись помилка, буде шукати файлик main hbs.
//
// app.set("views", path.join(__dirname,"static"));
//
// // прописуємо шлях до папки в котрій будуть зберігатися всі наші вюшки, все що будемо відренджувати
// // встановлюємо де наші вюшкі будуть лежати. Тут будуть лежати всі наші hbs файли.
//
// app.use(express.static(path.join(__dirname,"static")));
//
// // робим папку static публічною, і виводимо все на зовні, Оскільки нода по замовчюванні всі папки блочить.
//
//
// // УСІ НАЛАШТУВАННЯ ПО ДВИГУНУ ЗАЛЕЖАТЬ ВІД ТОГО, ЯКИЙ ДВИГУН МИ ВИКОРИСТРВУЄМО, ПРОПИСАНІ ШЛЯХИ ВЮШОК, А САМЕ ДЕ ВОНИ ЛЕЖАТИ БУДУТЬ І ЯКУ ПАПКУК РОБИТИ
// // ПУБЛІЧНОЮ ТЕЖ ЗАЛЕЖИТЬ ВІД НАС, ДЕ МИ ЦЕ ВСЕ ПОРОЗМІЩУЄМО.
// // Темплейт двигуни існують для написання фронту на бекенді, ми пишемо не  на HTML, а на темплейт двигунах(вони дають можливість більш розширити написання
// // нашого коду, а саме динамічні змінні, різні іфки)
//
// //===============================================================================================================================================================//
//
//
//
// // app.get("/users", (req, res) => {
// //     res.render("users", {users});
// // });
// // на app.get "/users", ми будемо відренджувати файл users з файлу users.hbs, прокинувши динамічно наших {users} в options.
// // непотрібно писати static/users.hbs.Нода зразу знає, що шукати.
// // оскільки  users це масив то вже на двіжку їх ітеруємо і виводимо
//
//
//
// // app.get("/login", (req, res) => {
// //     res.render("login",{isADULT:true});
// // });
// // на app.get "/login", ми будемо відренджувати файл login з файлу login.hbs, він нам відмалює форму з інпутами
// // також через option прокинем значення {isADULT:true}, це суто для іфки, просто щоб побачити приклад
//
//
//
// // app.post("/login", (req, res) => {
// //     console.log(req.body)
// //     res.end("OK")
// // })
// // на app.post"/login", в нас відпрацює forma,  оскільки ми її прописали action="/login" method="post"
// // вона нам поверне через req.body введені значення з інпути, ми це побачимо в console.log
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
